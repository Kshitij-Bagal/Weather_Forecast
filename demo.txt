<!-- <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather Map with OpenLayers</title>
  <script src=" https://cdn.jsdelivr.net/gh/openlayers/openlayers.github.io@master/en/v6.5.0/build/ol.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/ol@6.5.0/ol.css" type="text/css">
  <style>
    body {
      font-family: Arial, sans-serif;
      text-align: center;
      padding: 20px;
    }
    #map {
      height: 500px;
      width: 100%;
      margin-top: 20px;
    }
    input {
      padding: 10px;
      margin: 10px;
      width: 300px;
    }
    button {
      padding: 10px 20px;
    }
    .layer-select {
      margin: 20px;
    }
  </style>
</head>
<body>

  <h1>Weather Map with Search and Layers (OpenLayers)</h1>

  <input type="text" id="location" placeholder="Enter City, ZIP Code, or Country">
  <button onclick="fetchWeather()">Search Weather</button>

  <div class="layer-select">
    <label for="layers">Select Weather Layer:</label>
    <select id="layers" onchange="changeLayer()">
      <option value="temp_new">Temperature</option>
      <option value="wind_new">Wind Speed</option>
      <option value="pressure_new">Pressure</option>
      <option value="precipitation_new">Precipitation</option>
      <option value="clouds_new">Clouds</option>
    </select>
  </div>

  <div id="map" class="map"></div>

  <script>
    const apiKey = 'c06b3b46bff119811142645233081c47'; // Your OpenWeather API key
    let map, weatherLayer;

    // Initialize the OpenLayers map
    function initMap(lat = 20, lon = 0) {
      map = new ol.Map({
        target: 'map',
        layers: [
          new ol.layer.Tile({
            source: new ol.source.OSM() // Base OpenStreetMap layer
          })
        ],
        view: new ol.View({
          center: ol.proj.fromLonLat([lon, lat]),
          zoom: 2
        })
      });

      // Initialize the weather layer with temperature
      changeLayer();
    }

    // Change weather layer based on selection
    function changeLayer() {
      const layerType = document.getElementById('layers').value;

      if (weatherLayer) {
        map.removeLayer(weatherLayer); // Remove previous layer
      }

      // Add new weather layer based on user selection
      weatherLayer = new ol.layer.Tile({
        source: new ol.source.XYZ({
          url: `https://tile.openweathermap.org/map/${layerType}/{z}/{x}/{y}.png?appid=${apiKey}`
        })
      });

      map.addLayer(weatherLayer);
    }

    // Fetch weather data from OpenWeather API
    function fetchWeather() {
      const location = document.getElementById('location').value;

      if (location) {
        const apiURL = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(location)}&appid=${apiKey}&units=metric`;

        fetch(apiURL)
          .then(response => response.json())
          .then(data => {
            if (data.cod === 200) {
              const lat = data.coord.lat;
              const lon = data.coord.lon;
              const weatherInfo = `
                <strong>${data.name}, ${data.sys.country}</strong><br>
                <strong>Temperature:</strong> ${data.main.temp}Â°C<br>
                <strong>Weather:</strong> ${data.weather[0].description}<br>
                <strong>Humidity:</strong> ${data.main.humidity}%<br>
                <strong>Wind Speed:</strong> ${data.wind.speed} m/s
              `;
              showWeatherOnMap(lat, lon, weatherInfo);
            } else {
              alert('Location not found.');
            }
          })
          .catch(error => console.error('Error fetching weather data:', error));
      } else {
        alert('Please enter a location.');
      }
    }

    // Show weather data on the map
    function showWeatherOnMap(lat, lon, weatherInfo) {
      map.getView().setCenter(ol.proj.fromLonLat([lon, lat]));
      map.getView().setZoom(10);
    }

    // Initialize the map
    initMap();
  </script>

</body>
</html> -->


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
08/11/2024


// // Load countries and cities from the JSON file
// async function loadCityData() {
//     const response = await fetch('CityDataset.json'); // Fetch data from CityDataset.json
//     const cityData = await response.json();
//     cityDataset = cityData.CityDataset;

//     // Populate countries in the dropdown
//     loadCountries(cityDataset);
// }

// // Initialize the map
// function initMap() {
//     map = L.map('map').setView([20, 0], 2); // Default world view

//     // Add tile layer (OpenStreetMap base layer)
//     L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
//         attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
//     }).addTo(map);

//     loadCityData(); // Load city data on map initialization
// }

// // Load countries and populate the country dropdown
// function loadCountries(cityDataset) {
//     const countries = [...new Set(cityDataset.map(city => city.country))];

//     // Populate the country dropdown list
//     const countryList = document.getElementById('countryList');
//     countryList.innerHTML = ''; // Clear existing items

//     countries.forEach(country => {
//         const div = document.createElement('div');
//         div.textContent = country;
//         div.onclick = () => selectCountry(country);
//         countryList.appendChild(div);
//     });
// }

// // Filter countries based on input
// function filterCountries() {
//     const input = document.getElementById('countryInput').value.toLowerCase();
//     const countryList = document.getElementById('countryList');
//     const options = countryList.children;

//     // Hide all options and only show those that match
//     Array.from(options).forEach(option => {
//         if (option.textContent.toLowerCase().includes(input)) {
//             option.style.display = '';
//         } else {
//             option.style.display = 'none';
//         }
//     });

//     // Show the dropdown list if there are matching options
//     countryList.style.display = Array.from(options).some(option => option.style.display !== 'none') ? 'block' : 'none';
// }

// // Select a country from the list
// function selectCountry(country) {
//     document.getElementById('countryInput').value = country;
//     document.getElementById('countryList').style.display = 'none';
//     updateCities(); // Update the cities dropdown
// }

// // Update the city dropdown based on the selected country
// function updateCities() {
//     const selectedCountry = document.getElementById('countryInput').value;
//     const cityInput = document.getElementById('cityInput');
//     const cityList = document.getElementById('cityList');
//     cityList.innerHTML = ''; // Clear existing items

//     if (selectedCountry) {
//         const citiesInCountry = cityDataset.filter(city => city.country === selectedCountry);
        
//         citiesInCountry.forEach(city => {
//             const div = document.createElement('div');
//             div.textContent = city.city;
//             div.onclick = () => selectCity(city.city, city.lat, city.lng);
//             cityList.appendChild(div);
//         });
//     }
// }

// // Filter cities based on input
// function filterCities() {
//     const input = document.getElementById('cityInput').value.toLowerCase();
//     const cityList = document.getElementById('cityList');
//     const options = cityList.children;

//     // Hide all options and only show those that match
//     Array.from(options).forEach(option => {
//         if (option.textContent.toLowerCase().includes(input)) {
//             option.style.display = '';
//         } else {
//             option.style.display = 'none';
//         }
//     });

//     // Show the dropdown list if there are matching options
//     cityList.style.display = Array.from(options).some(option => option.style.display !== 'none') ? 'block' : 'none';
// }

// // Select a city from the list
// function selectCity(city, lat, lng) {
//     document.getElementById('cityInput').value = city;
//     document.getElementById('cityList').style.display = 'none';
//     fetchWeatherForCity(city, lat, lng); // Fetch weather for the selected city
// }

// // Fetch weather data for the selected city and update the map
// async function fetchWeatherForCity(city, lat, lng) {
//     const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

//     try {
//         const response = await fetch(apiUrl);
//         const weatherData = await response.json();

//         // Check if the response is successful
//         if (response.ok) {
//             // Clear previous marker
//             if (cityMarker) {
//                 map.removeLayer(cityMarker);
//             }

//             // Add a marker for the selected city
//             cityMarker = L.marker([lat, lng]).addTo(map)
//                 .bindPopup(createWeatherPopup(weatherData))
//                 .openPopup();

//             // Set map view to the selected city
//             map.setView([lat, lng], 10);
//         } else {
//             console.error('Weather data not found:', weatherData.message);
//             alert('Error: ' + weatherData.message);
//         }
//     } catch (error) {
//         console.error('Error fetching weather data:', error);
//         alert('Error fetching weather data. Please try again.');
//     }
// }

// // Create a popup content for the weather data
// function createWeatherPopup(weatherData) {
//     const cityName = weatherData.name;
//     const temperature = weatherData.main.temp;
//     const description = weatherData.weather[0].description;
//     const humidity = weatherData.main.humidity;
//     const windSpeed = weatherData.wind.speed;

//     return `
//         <div>
//             <h3>${cityName}</h3>
//             <p>Temperature: ${temperature}Â°C</p>
//             <p>Condition: ${description}</p>
//             <p>Humidity: ${humidity}%</p>
//             <p>Wind Speed: ${windSpeed} m/s</p>
//         </div>
//     `;
// }

// // Initialize the map on page load
// // window.onload = initMap;
// // const cityInput = document.getElementById('cityInput');
// // const searchBtn = document.getElementById('searchBtn');
// // const weatherInfo = document.getElementById('weatherInfo');
// // const recentCitiesDropdown = document.getElementById('recentCitiesDropdown');








    <header>
        <img src="Resources/KB-DEV-Icon.PNG" alt="Icon">
        <div>
            <h1>KB Learning <br> Hub</h1>
        </div> 
    </header>


header {
    display: flex;
    text-align: center;
    margin-bottom: 40px;
    padding-top: 20px;
    background-color: #000000;
    color: white;
    width: 100%;
    justify-content: space-evenly;
}
img{
    width: 150px;
}

h1 {
    font-size: clamp(3em, calc(3em + 3px), 3vw);
    margin: 0;
}

@media screen and (max-width: 768px) {
    header h1 {
        font-size: 58px;
    }
}

@media screen and (max-width: 390px) {
      header {
        flex-direction: row;
        align-items: center;
        padding-top: 15px;
    }

    header h1 {
        font-size: 50px;
        text-align: center;
    }
}






